# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from wheelchair_navigation/MotorMonitor.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorMonitor(genpy.Message):
  _md5sum = "045868ccfaa5def7ddef819695f5b3b2"
  _type = "wheelchair_navigation/MotorMonitor"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 amps1
float32 amps2
float32 v_int
float32 v_batt
int32 rpm1
int32 rpm2
int32 encoder1
int32 encoder2
int32 cmd1
int32 cmd2
int32 temp1
int32 temp2
uint8 faultFlags
string mode
"""
  __slots__ = ['amps1','amps2','v_int','v_batt','rpm1','rpm2','encoder1','encoder2','cmd1','cmd2','temp1','temp2','faultFlags','mode']
  _slot_types = ['float32','float32','float32','float32','int32','int32','int32','int32','int32','int32','int32','int32','uint8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       amps1,amps2,v_int,v_batt,rpm1,rpm2,encoder1,encoder2,cmd1,cmd2,temp1,temp2,faultFlags,mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorMonitor, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.amps1 is None:
        self.amps1 = 0.
      if self.amps2 is None:
        self.amps2 = 0.
      if self.v_int is None:
        self.v_int = 0.
      if self.v_batt is None:
        self.v_batt = 0.
      if self.rpm1 is None:
        self.rpm1 = 0
      if self.rpm2 is None:
        self.rpm2 = 0
      if self.encoder1 is None:
        self.encoder1 = 0
      if self.encoder2 is None:
        self.encoder2 = 0
      if self.cmd1 is None:
        self.cmd1 = 0
      if self.cmd2 is None:
        self.cmd2 = 0
      if self.temp1 is None:
        self.temp1 = 0
      if self.temp2 is None:
        self.temp2 = 0
      if self.faultFlags is None:
        self.faultFlags = 0
      if self.mode is None:
        self.mode = ''
    else:
      self.amps1 = 0.
      self.amps2 = 0.
      self.v_int = 0.
      self.v_batt = 0.
      self.rpm1 = 0
      self.rpm2 = 0
      self.encoder1 = 0
      self.encoder2 = 0
      self.cmd1 = 0
      self.cmd2 = 0
      self.temp1 = 0
      self.temp2 = 0
      self.faultFlags = 0
      self.mode = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4f8iB().pack(_x.amps1, _x.amps2, _x.v_int, _x.v_batt, _x.rpm1, _x.rpm2, _x.encoder1, _x.encoder2, _x.cmd1, _x.cmd2, _x.temp1, _x.temp2, _x.faultFlags))
      _x = self.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 49
      (_x.amps1, _x.amps2, _x.v_int, _x.v_batt, _x.rpm1, _x.rpm2, _x.encoder1, _x.encoder2, _x.cmd1, _x.cmd2, _x.temp1, _x.temp2, _x.faultFlags,) = _get_struct_4f8iB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mode = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4f8iB().pack(_x.amps1, _x.amps2, _x.v_int, _x.v_batt, _x.rpm1, _x.rpm2, _x.encoder1, _x.encoder2, _x.cmd1, _x.cmd2, _x.temp1, _x.temp2, _x.faultFlags))
      _x = self.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 49
      (_x.amps1, _x.amps2, _x.v_int, _x.v_batt, _x.rpm1, _x.rpm2, _x.encoder1, _x.encoder2, _x.cmd1, _x.cmd2, _x.temp1, _x.temp2, _x.faultFlags,) = _get_struct_4f8iB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mode = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f8iB = None
def _get_struct_4f8iB():
    global _struct_4f8iB
    if _struct_4f8iB is None:
        _struct_4f8iB = struct.Struct("<4f8iB")
    return _struct_4f8iB

// Generated by gencpp from file roboteq_diff_msgs/OdometryCovariances.msg
// DO NOT EDIT!


#ifndef ROBOTEQ_DIFF_MSGS_MESSAGE_ODOMETRYCOVARIANCES_H
#define ROBOTEQ_DIFF_MSGS_MESSAGE_ODOMETRYCOVARIANCES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboteq_diff_msgs
{
template <class ContainerAllocator>
struct OdometryCovariances_
{
  typedef OdometryCovariances_<ContainerAllocator> Type;

  OdometryCovariances_()
    : pose_covariance()
    , twist_covariance()  {
      pose_covariance.assign(0.0);

      twist_covariance.assign(0.0);
  }
  OdometryCovariances_(const ContainerAllocator& _alloc)
    : pose_covariance()
    , twist_covariance()  {
  (void)_alloc;
      pose_covariance.assign(0.0);

      twist_covariance.assign(0.0);
  }



   typedef boost::array<double, 36>  _pose_covariance_type;
  _pose_covariance_type pose_covariance;

   typedef boost::array<double, 36>  _twist_covariance_type;
  _twist_covariance_type twist_covariance;





  typedef boost::shared_ptr< ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator> const> ConstPtr;

}; // struct OdometryCovariances_

typedef ::roboteq_diff_msgs::OdometryCovariances_<std::allocator<void> > OdometryCovariances;

typedef boost::shared_ptr< ::roboteq_diff_msgs::OdometryCovariances > OdometryCovariancesPtr;
typedef boost::shared_ptr< ::roboteq_diff_msgs::OdometryCovariances const> OdometryCovariancesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator1> & lhs, const ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator2> & rhs)
{
  return lhs.pose_covariance == rhs.pose_covariance &&
    lhs.twist_covariance == rhs.twist_covariance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator1> & lhs, const ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboteq_diff_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c3148155b9dab73bc27e9e0d42f61e93";
  }

  static const char* value(const ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc3148155b9dab73bULL;
  static const uint64_t static_value2 = 0xc27e9e0d42f61e93ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboteq_diff_msgs/OdometryCovariances";
  }

  static const char* value(const ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[36] pose_covariance\n"
"float64[36] twist_covariance\n"
;
  }

  static const char* value(const ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose_covariance);
      stream.next(m.twist_covariance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OdometryCovariances_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboteq_diff_msgs::OdometryCovariances_<ContainerAllocator>& v)
  {
    s << indent << "pose_covariance[]" << std::endl;
    for (size_t i = 0; i < v.pose_covariance.size(); ++i)
    {
      s << indent << "  pose_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pose_covariance[i]);
    }
    s << indent << "twist_covariance[]" << std::endl;
    for (size_t i = 0; i < v.twist_covariance.size(); ++i)
    {
      s << indent << "  twist_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.twist_covariance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTEQ_DIFF_MSGS_MESSAGE_ODOMETRYCOVARIANCES_H

// Generated by gencpp from file roboteq_diff_msgs/RequestOdometryCovariancesRequest.msg
// DO NOT EDIT!


#ifndef ROBOTEQ_DIFF_MSGS_MESSAGE_REQUESTODOMETRYCOVARIANCESREQUEST_H
#define ROBOTEQ_DIFF_MSGS_MESSAGE_REQUESTODOMETRYCOVARIANCESREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Empty.h>

namespace roboteq_diff_msgs
{
template <class ContainerAllocator>
struct RequestOdometryCovariancesRequest_
{
  typedef RequestOdometryCovariancesRequest_<ContainerAllocator> Type;

  RequestOdometryCovariancesRequest_()
    : empty()  {
    }
  RequestOdometryCovariancesRequest_(const ContainerAllocator& _alloc)
    : empty(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Empty_<ContainerAllocator>  _empty_type;
  _empty_type empty;





  typedef boost::shared_ptr< ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RequestOdometryCovariancesRequest_

typedef ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<std::allocator<void> > RequestOdometryCovariancesRequest;

typedef boost::shared_ptr< ::roboteq_diff_msgs::RequestOdometryCovariancesRequest > RequestOdometryCovariancesRequestPtr;
typedef boost::shared_ptr< ::roboteq_diff_msgs::RequestOdometryCovariancesRequest const> RequestOdometryCovariancesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator1> & lhs, const ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator2> & rhs)
{
  return lhs.empty == rhs.empty;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator1> & lhs, const ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboteq_diff_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6aac6c697d5414bc0fcede8c33981d0e";
  }

  static const char* value(const ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6aac6c697d5414bcULL;
  static const uint64_t static_value2 = 0x0fcede8c33981d0eULL;
};

template<class ContainerAllocator>
struct DataType< ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboteq_diff_msgs/RequestOdometryCovariancesRequest";
  }

  static const char* value(const ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Empty empty\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Empty\n"
;
  }

  static const char* value(const ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.empty);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RequestOdometryCovariancesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboteq_diff_msgs::RequestOdometryCovariancesRequest_<ContainerAllocator>& v)
  {
    s << indent << "empty: ";
    s << std::endl;
    Printer< ::std_msgs::Empty_<ContainerAllocator> >::stream(s, indent + "  ", v.empty);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTEQ_DIFF_MSGS_MESSAGE_REQUESTODOMETRYCOVARIANCESREQUEST_H

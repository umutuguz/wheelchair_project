// Generated by gencpp from file wheelchair_navigation/MotorMonitor.msg
// DO NOT EDIT!


#ifndef WHEELCHAIR_NAVIGATION_MESSAGE_MOTORMONITOR_H
#define WHEELCHAIR_NAVIGATION_MESSAGE_MOTORMONITOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wheelchair_navigation
{
template <class ContainerAllocator>
struct MotorMonitor_
{
  typedef MotorMonitor_<ContainerAllocator> Type;

  MotorMonitor_()
    : amps1(0.0)
    , amps2(0.0)
    , v_int(0.0)
    , v_batt(0.0)
    , rpm1(0)
    , rpm2(0)
    , encoder1(0)
    , encoder2(0)
    , cmd1(0)
    , cmd2(0)
    , temp1(0)
    , temp2(0)
    , faultFlags(0)
    , mode()  {
    }
  MotorMonitor_(const ContainerAllocator& _alloc)
    : amps1(0.0)
    , amps2(0.0)
    , v_int(0.0)
    , v_batt(0.0)
    , rpm1(0)
    , rpm2(0)
    , encoder1(0)
    , encoder2(0)
    , cmd1(0)
    , cmd2(0)
    , temp1(0)
    , temp2(0)
    , faultFlags(0)
    , mode(_alloc)  {
  (void)_alloc;
    }



   typedef float _amps1_type;
  _amps1_type amps1;

   typedef float _amps2_type;
  _amps2_type amps2;

   typedef float _v_int_type;
  _v_int_type v_int;

   typedef float _v_batt_type;
  _v_batt_type v_batt;

   typedef int32_t _rpm1_type;
  _rpm1_type rpm1;

   typedef int32_t _rpm2_type;
  _rpm2_type rpm2;

   typedef int32_t _encoder1_type;
  _encoder1_type encoder1;

   typedef int32_t _encoder2_type;
  _encoder2_type encoder2;

   typedef int32_t _cmd1_type;
  _cmd1_type cmd1;

   typedef int32_t _cmd2_type;
  _cmd2_type cmd2;

   typedef int32_t _temp1_type;
  _temp1_type temp1;

   typedef int32_t _temp2_type;
  _temp2_type temp2;

   typedef uint8_t _faultFlags_type;
  _faultFlags_type faultFlags;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::wheelchair_navigation::MotorMonitor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wheelchair_navigation::MotorMonitor_<ContainerAllocator> const> ConstPtr;

}; // struct MotorMonitor_

typedef ::wheelchair_navigation::MotorMonitor_<std::allocator<void> > MotorMonitor;

typedef boost::shared_ptr< ::wheelchair_navigation::MotorMonitor > MotorMonitorPtr;
typedef boost::shared_ptr< ::wheelchair_navigation::MotorMonitor const> MotorMonitorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wheelchair_navigation::MotorMonitor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wheelchair_navigation::MotorMonitor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wheelchair_navigation::MotorMonitor_<ContainerAllocator1> & lhs, const ::wheelchair_navigation::MotorMonitor_<ContainerAllocator2> & rhs)
{
  return lhs.amps1 == rhs.amps1 &&
    lhs.amps2 == rhs.amps2 &&
    lhs.v_int == rhs.v_int &&
    lhs.v_batt == rhs.v_batt &&
    lhs.rpm1 == rhs.rpm1 &&
    lhs.rpm2 == rhs.rpm2 &&
    lhs.encoder1 == rhs.encoder1 &&
    lhs.encoder2 == rhs.encoder2 &&
    lhs.cmd1 == rhs.cmd1 &&
    lhs.cmd2 == rhs.cmd2 &&
    lhs.temp1 == rhs.temp1 &&
    lhs.temp2 == rhs.temp2 &&
    lhs.faultFlags == rhs.faultFlags &&
    lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wheelchair_navigation::MotorMonitor_<ContainerAllocator1> & lhs, const ::wheelchair_navigation::MotorMonitor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wheelchair_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wheelchair_navigation::MotorMonitor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wheelchair_navigation::MotorMonitor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wheelchair_navigation::MotorMonitor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wheelchair_navigation::MotorMonitor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wheelchair_navigation::MotorMonitor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wheelchair_navigation::MotorMonitor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wheelchair_navigation::MotorMonitor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "045868ccfaa5def7ddef819695f5b3b2";
  }

  static const char* value(const ::wheelchair_navigation::MotorMonitor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x045868ccfaa5def7ULL;
  static const uint64_t static_value2 = 0xddef819695f5b3b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::wheelchair_navigation::MotorMonitor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wheelchair_navigation/MotorMonitor";
  }

  static const char* value(const ::wheelchair_navigation::MotorMonitor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wheelchair_navigation::MotorMonitor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 amps1\n"
"float32 amps2\n"
"float32 v_int\n"
"float32 v_batt\n"
"int32 rpm1\n"
"int32 rpm2\n"
"int32 encoder1\n"
"int32 encoder2\n"
"int32 cmd1\n"
"int32 cmd2\n"
"int32 temp1\n"
"int32 temp2\n"
"uint8 faultFlags\n"
"string mode\n"
;
  }

  static const char* value(const ::wheelchair_navigation::MotorMonitor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wheelchair_navigation::MotorMonitor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.amps1);
      stream.next(m.amps2);
      stream.next(m.v_int);
      stream.next(m.v_batt);
      stream.next(m.rpm1);
      stream.next(m.rpm2);
      stream.next(m.encoder1);
      stream.next(m.encoder2);
      stream.next(m.cmd1);
      stream.next(m.cmd2);
      stream.next(m.temp1);
      stream.next(m.temp2);
      stream.next(m.faultFlags);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorMonitor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wheelchair_navigation::MotorMonitor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wheelchair_navigation::MotorMonitor_<ContainerAllocator>& v)
  {
    s << indent << "amps1: ";
    Printer<float>::stream(s, indent + "  ", v.amps1);
    s << indent << "amps2: ";
    Printer<float>::stream(s, indent + "  ", v.amps2);
    s << indent << "v_int: ";
    Printer<float>::stream(s, indent + "  ", v.v_int);
    s << indent << "v_batt: ";
    Printer<float>::stream(s, indent + "  ", v.v_batt);
    s << indent << "rpm1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rpm1);
    s << indent << "rpm2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rpm2);
    s << indent << "encoder1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.encoder1);
    s << indent << "encoder2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.encoder2);
    s << indent << "cmd1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cmd1);
    s << indent << "cmd2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cmd2);
    s << indent << "temp1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.temp1);
    s << indent << "temp2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.temp2);
    s << indent << "faultFlags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.faultFlags);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WHEELCHAIR_NAVIGATION_MESSAGE_MOTORMONITOR_H

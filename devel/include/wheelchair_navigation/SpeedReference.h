// Generated by gencpp from file wheelchair_navigation/SpeedReference.msg
// DO NOT EDIT!


#ifndef WHEELCHAIR_NAVIGATION_MESSAGE_SPEEDREFERENCE_H
#define WHEELCHAIR_NAVIGATION_MESSAGE_SPEEDREFERENCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wheelchair_navigation
{
template <class ContainerAllocator>
struct SpeedReference_
{
  typedef SpeedReference_<ContainerAllocator> Type;

  SpeedReference_()
    : left(0)
    , right(0)  {
    }
  SpeedReference_(const ContainerAllocator& _alloc)
    : left(0)
    , right(0)  {
  (void)_alloc;
    }



   typedef int32_t _left_type;
  _left_type left;

   typedef int32_t _right_type;
  _right_type right;





  typedef boost::shared_ptr< ::wheelchair_navigation::SpeedReference_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wheelchair_navigation::SpeedReference_<ContainerAllocator> const> ConstPtr;

}; // struct SpeedReference_

typedef ::wheelchair_navigation::SpeedReference_<std::allocator<void> > SpeedReference;

typedef boost::shared_ptr< ::wheelchair_navigation::SpeedReference > SpeedReferencePtr;
typedef boost::shared_ptr< ::wheelchair_navigation::SpeedReference const> SpeedReferenceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wheelchair_navigation::SpeedReference_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wheelchair_navigation::SpeedReference_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wheelchair_navigation::SpeedReference_<ContainerAllocator1> & lhs, const ::wheelchair_navigation::SpeedReference_<ContainerAllocator2> & rhs)
{
  return lhs.left == rhs.left &&
    lhs.right == rhs.right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wheelchair_navigation::SpeedReference_<ContainerAllocator1> & lhs, const ::wheelchair_navigation::SpeedReference_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wheelchair_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wheelchair_navigation::SpeedReference_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wheelchair_navigation::SpeedReference_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wheelchair_navigation::SpeedReference_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wheelchair_navigation::SpeedReference_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wheelchair_navigation::SpeedReference_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wheelchair_navigation::SpeedReference_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wheelchair_navigation::SpeedReference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "febc810ab9cc360ca3f47fcee4f2ba71";
  }

  static const char* value(const ::wheelchair_navigation::SpeedReference_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfebc810ab9cc360cULL;
  static const uint64_t static_value2 = 0xa3f47fcee4f2ba71ULL;
};

template<class ContainerAllocator>
struct DataType< ::wheelchair_navigation::SpeedReference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wheelchair_navigation/SpeedReference";
  }

  static const char* value(const ::wheelchair_navigation::SpeedReference_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wheelchair_navigation::SpeedReference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 left\n"
"int32 right\n"
;
  }

  static const char* value(const ::wheelchair_navigation::SpeedReference_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wheelchair_navigation::SpeedReference_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left);
      stream.next(m.right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeedReference_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wheelchair_navigation::SpeedReference_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wheelchair_navigation::SpeedReference_<ContainerAllocator>& v)
  {
    s << indent << "left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left);
    s << indent << "right: ";
    Printer<int32_t>::stream(s, indent + "  ", v.right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WHEELCHAIR_NAVIGATION_MESSAGE_SPEEDREFERENCE_H
